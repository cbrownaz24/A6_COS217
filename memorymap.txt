------------------------------------------------------------------------
| Authors: Connor Brown and Laura Hwa
------------------------------------------------------------------------

//----------------------------------------------------------------------

Data
--------------------------------------------------------------
| Address       |       Constant        |        Description |
--------------------------------------------------------------
|               |                       | The character      |
| 0x420044      | 0x44                  | corresponding to   |
|               |                       | letter grade.      |
--------------------------------------------------------------

//----------------------------------------------------------------------

BSS
-------------------------------
| Address       | Content (A) |
-------------------------------
| 0x420058      |   'C'       |
-------------------------------
| 0x42005C      |   'o'       |
-------------------------------
| 0x420060      |   'n'       |
-------------------------------
| 0x420064      |   'n'       |
-------------------------------
| 0x420068      |   'o'       |
-------------------------------
| 0x42006C      |   'r'       |
-------------------------------
| 0x420070      |   ' '       |
-------------------------------
| 0x420074      |   '&'       |
-------------------------------
| 0x420078      |   ' '       |
-------------------------------
| 0x42007C      |   'L'       |
-------------------------------
| 0x420080      |   'a'       |
-------------------------------
| 0x420084      |   'u'       |
-------------------------------
| 0x420088      |   'r'       |
-------------------------------
| 0x42008C      |   'a'       |
-------------------------------
| 0x420090      |   '\0'      |
-------------------------------
| 0x420094      |   '\0'      |
-------------------------------
| 0x420098      |   '\0'      |
-------------------------------
| 0x42009C      |   '\0'      |
-------------------------------
| 0x4200A0      |   '\0'      |
-------------------------------
| 0x4200A4      |   '\0'      |
-------------------------------
| 0x4200A8      |   '\0'      |
-------------------------------
| 0x4200AC      |   '\0'      |
-------------------------------
| 0x4200B0      |   '\0'      |
-------------------------------
| 0x4200B4      |   '\0'      |
-------------------------------
| 0x4200B8      |   '\0'      |
-------------------------------
| 0x4200BC      |   '\0'      |
-------------------------------
| 0x4200C0      |   '\0'      |
-------------------------------
| 0x4200C4      |   '\0'      |
-------------------------------
| 0x4200C8      |   '\0'      |
-------------------------------
| 0x4200CC      |   '\0'      |
-------------------------------
| 0x4200D0      |   '\0'      |
-------------------------------
| 0x4200D4      |   '\0'      |
-------------------------------
| 0x4200D8      | movw0, 'A'  |
-------------------------------
| 0x4200DC      |             |
-------------------------------
| 0x4200E0      |             |
-------------------------------
| 0x4200E4      |             |
-------------------------------
| 0x4200E8      |adr x1, grade|
-------------------------------
| 0x4200EC      |             |
-------------------------------
| 0x4200F0      |             |
-------------------------------
| 0x4200F4      |             |
-------------------------------
| 0x4200F8      |strb w0, [x1]|
-------------------------------
| 0x4200FC      |             |
-------------------------------
| 0x420100      |             |
-------------------------------
| 0x420104      |             |
-------------------------------
| 0x420108      | b 0x40089c  |
-------------------------------
| 0x42010C      |             |
-------------------------------
| 0x420110      |             |
-------------------------------
| 0x420114      |             |
-------------------------------

//----------------------------------------------------------------------

Stack
-------------------------------
| Offset        | Description |
-------------------------------
|  0            |  x30        |
-------------------------------
|  8            |  x21        |
-------------------------------
|  16           |  x20        |
-------------------------------
|  24           |  x19        |
-------------------------------
|  32           |  buf        |
-------------------------------
|  40           |  buf        |
-------------------------------
|  48           |  buf        |
-------------------------------
|  56           |  buf        |
-------------------------------
|  64           |  buf        |
-------------------------------
|  72           |  buf        |
-------------------------------
|  80           |getName's x0 |
-------------------------------

//----------------------------------------------------------------------

// readString()
   // prolog
   0x4007c4:    stp     x19, x20, [sp, #-80]!
   0x4007c8:    stp     x21, x30, [sp, #16]

   // first loop setup
   0x4007cc:    mov     x19, #0x0                       // #0
   0x4007d0:    adrp    x21, 0x420000 <__libc_start_main@got.plt>
   0x4007d4:    mov     w20, w19

   // first loop
   0x4007d8:    ldr     x0, [x21, #72]
   0x4007dc:    bl      0x400640 <fgetc@plt>
   0x4007e0:    add     x19, x19, #0x1
   0x4007e4:    cmp     w0, #0xa
   0x4007e8:    ccmn    w0, #0x1, #0x4, ne  // ne = any
   0x4007ec:    b.eq    0x400800 <readString+60>  // b.none
   0x4007f0:    add     x1, sp, #0x20
   0x4007f4:    add     x1, x19, x1
   0x4007f8:    sturb   w0, [x1, #-1]
   0x4007fc:    b       0x4007d4 <readString+16>

   // buf[i] = '\n';
   0x400800:    add     x0, sp, #0x20
   0x400804:    strb    wzr, [x0, w20, sxtw]

   // second loop setup
   0x400808:    mov     x0, #0x1                        // #1
   0x40080c:    adrp    x3, 0x420000 <__libc_start_main@got.plt>
   0x400810:    add     x3, x3, #0x58

   // second loop
   0x400814:    add     x1, x3, x0
   0x400818:    add     x2, sp, #0x20
   0x40081c:    add     x2, x0, x2
   0x400820:    ldurb   w2, [x2, #-1]
   0x400824:    sturb   w2, [x1, #-1]
   0x400828:    add     x0, x0, #0x1
   0x40082c:    cmp     x0, #0x31
   0x400830:    b.ne    0x400814 <readString+80>  // b.any

   // epilog and return
   0x400834:    ldp     x21, x30, [sp, #16]
   0x400838:    ldp     x19, x20, [sp], #80
   0x40083c:    ret

//----------------------------------------------------------------------

// getName()
   // prolog
   0x400840:    str     x30, [sp, #-16]!

   // printf("What is your name?\n");
   0x400844:    adrp    x0, 0x400000
   0x400848:    add     x0, x0, #0x8f8
   0x40084c:    bl      0x400670 <puts@plt>

   // readString();
   0x400850:    bl      0x4007c4 <readString>

   // epilog and return
   0x400854:    ldr     x30, [sp], #16
   0x400858:    ret

//----------------------------------------------------------------------

// main()
   // prolog
   0x40085c:  stp     x19, x30, [sp, #-16]!
   0x400860:  adrp    x19, 0x420000 <__libc_start_main@got.plt>
   0x400864:  add     x19, x19, #0x58

   // mprotect((void*)((unsigned long)name & 0xfffffffffffff000), 1,
   // PROT_READ | PROT_WRITE | PROT_EXEC);
   0x400868:  mov     w2, #0x7                        // #7
   0x40086c:  mov     x1, #0x1                        // #1
   0x400870:  and     x0, x19, #0xfffffffffffff000
   0x400874:  bl      0x4006a0 <mprotect@plt>

   // getName();
   0x400878:  bl      0x400840 <getName>

   // if (strcmp(name, "Andrew Appel") != 0) skip assignment to grade
   0x40087c:  adrp    x1, 0x400000
   0x400880:  add     x1, x1, #0x910
   0x400884:  mov     x0, x19
   0x400888:  bl      0x400680 <strcmp@plt>
   0x40088c:  cbnz    w0, 0x40089c <main+64>

   // grade = 'B'
   0x400890:  adrp    x0, 0x420000 <__libc_start_main@got.plt>
   0x400894:  mov     w1, #0x42                      
   0x400898:  strb    w1, [x0, #68]

   // printf("%c is your grade.\n", grade);
   0x40089c:  adrp    x0, 0x420000 <__libc_start_main@got.plt>
   0x4008a0:  ldrb    w1, [x0, #68]
   0x4008a4:  adrp    x0, 0x400000
   0x4008a8:  add     x0, x0, #0x920
   0x4008ac:  bl      0x400690 <printf@plt>

   // printf("Thank you, %s.\n", name);
   0x4008b0:  adrp    x1, 0x420000 <__libc_start_main@got.plt>
   0x4008b4:  add     x1, x1, #0x58
   0x4008b8:  adrp    x0, 0x400000
   0x4008bc:  add     x0, x0, #0x938
   0x4008c0:  bl      0x400690 <printf@plt>

   // epilog and return
   0x4008c4:  mov     w0, #0x0                        // #0
   0x4008c8:  ldp     x19, x30, [sp], #16
   0x4008cc:  ret